import React, { useState, useEffect } from "react";
import { Form, Button, Nav, ProgressBar, Modal } from "react-bootstrap";
import axios from "axios";
import "../Css/UserProfile.css"; // Link the CSS file
import { useAuth } from "./Auth"; // Assuming this is your auth context
import userImage from "../assets/images/book_logo.png";
import UserLogo from "../assets/images/profileimg-membership.png";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const UserProfile = () => {
  const { userData, setUserData } = useAuth(); // Fetch userData from Auth context
  const [teamData, setTeamData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [referralCount, setReferralCount] = useState(0);
  const [taskCount, setTaskCount] = useState(50); // Task count
  const [isEditing, setIsEditing] = useState(false);
  const [editableDetails, setEditableDetails] = useState(userData || {});
  const [error, setError] = useState("");
  const [activeTab, setActiveTab] = useState("about"); // State for active tab
  const [showModal, setShowModal] = useState(false);

  // Update editableDetails when userData changes
  useEffect(() => {
    setEditableDetails(userData || {});
  }, [userData]);

  // Fetch team data based on user ID
  const fetchTeamData = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get(
        `https://signpostphonebook.in/try_totalcount.php?id=${userData?.id}`
      );
      if (response.data?.total_count) {
        setTeamData([{ total_count: response.data.total_count }]);
        setTaskCount(response.data.total_count || 0); // Set task count from the API response
      } else {
        setTeamData([]);
      }
    } catch (error) {
      console.error("Error fetching team data:", error);
      setTeamData([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch referral count based on user mobile number
  const fetchReferralCount = async () => {
    try {
      if (!userData?.mobileno) {
        setError("Mobile number is required for fetching referral count.");
        return;
      }
  
      const response = await fetch(
        `https://signpostphonebook.in/try_referrals_count.php?mobile=${encodeURIComponent(userData.mobileno)}`
      );
  
      if (!response.ok) {
        throw new Error("Failed to fetch referral count.");
      }
  
      const data = await response.text(); // Fetch response as text
  
      const match = data.match(/Total Referred: (\d+)/); // Extract number from response
  
      if (match) {
        setReferralCount(parseInt(match[1], 10)); // Set extracted referral count
      } else {
        setError("No referral data found.");
      }
    } catch (error) {
      setError(error.message || "Failed to fetch referral count.");
    }
  };
  

  useEffect(() => {
    if (userData) {
      fetchTeamData();
      fetchReferralCount();
    }
  }, [userData]);

  // Handle edit toggle
  const toggleEdit = () => {
    setIsEditing(!isEditing);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditableDetails((prev) => ({ ...prev, [name]: value }));
  };

  // Save profile changes
  const handleSave = async () => {
    try {
      if (!editableDetails.id) {
        setError("User ID is missing. Cannot update profile.");
        return;
      }

      const { mobileno, ...payload } = editableDetails;
      payload.id = userData.id;

      console.log("Payload being sent to server:", payload);

      const response = await axios.post(
        "https://signpostphonebook.in/try_update_profile.php",
        payload
      );

      if (response.data.success) {
        if (setUserData) {
          setUserData((prevData) => ({
            ...prevData,
            ...payload, // Include updated details
          }));
        } else {
          console.error("setUserData is not a function");
        }
        setIsEditing(false);  // Switch to non-editable view
        setError("");  // Clear any errors
        console.log("Profile updated successfully:", response.data.message);
      } else {
        console.error("Failed to update profile:", response.data.message);
        setError(response.data.message || "Failed to save changes.");
      }
    } catch (error) {
      console.error("Error updating profile:", error);
      setError("Something went wrong. Please try again later.");
    }
  };

  const handleTabChange = (selectedTab) => {
    setActiveTab(selectedTab); // Update active tab
  };

  const handleDownloadPDF = async () => {
    try {
      const frontCardElement = document.querySelector(".card-front");
      const backCardElement = document.querySelector(".card-back");

      if (!frontCardElement || !backCardElement) {
        console.error("Could not find the front or back card elements. Make sure the class names are correct.");
        return;
      }

      // Generate canvas for the front side
      const frontCanvas = await html2canvas(frontCardElement, {
        scale: 2,
        useCORS: true, // Helps load external images
      });
      const frontImgData = frontCanvas.toDataURL("image/png");

      // Generate canvas for the back side
      const backCanvas = await html2canvas(backCardElement, {
        scale: 2,
        useCORS: true,
      });
      const backImgData = backCanvas.toDataURL("image/png");

      // Create a PDF document
      const pdfWidth = 210; // A4 width in mm
      const pdfHeight = 297; // A4 height in mm

      const cardWidth = pdfWidth - 40; // Card width with padding
      const cardHeight = (frontCanvas.height / frontCanvas.width) * cardWidth; // Maintain aspect ratio

      const pdf = new jsPDF("portrait", "mm", "a4");

      // Add the front image
      pdf.addImage(frontImgData, "PNG", 20, 50, cardWidth, cardHeight); // Center it on the page

      // Add the back image on a new page
      pdf.addPage();
      pdf.addImage(backImgData, "PNG", 20, 50, cardWidth, cardHeight); // Same placement as front

      // Save the PDF
      pdf.save("Membership_Card.pdf");
    } catch (error) {
      console.error("Error generating PDF:", error);
    }
  };

  // Guard against null userData
  if (!userData) {
    return <div>Loading user data...</div>;
  }

  return (
    <div className="user-profile">
      <div
        className="profile-head"
        style={{
          backgroundColor: "#add8e6",
          borderRadius: "10px",
        }}
      >
        <div className="profile-header">
          <div className="profile-picture">
            <div className="profile-circle">
              <i className="fas fa-camera"></i>
            </div>
          </div>
          <div className="profile-info" style={{ marginTop: "5vh" }}>
            <h3>{userData?.businessname || "Business Name Not Available"}</h3>
            <p>{userData?.product || "Product Info Not Available"}</p>
            <p>{userData?.joiningDate || "Joining Date Not Available"}</p>
          </div>
          <div className="profile-actions">
            <Button className="share-btn">
              <i className="fas fa-share"></i> Share
            </Button>
            <Button className="ref-btn" onClick={() => setShowModal(true)}>
              <i className="fas fa-users"></i> My Ref
            </Button>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="tabs-wrapper">
          <Nav
            variant="pills"
            activeKey={activeTab}
            onSelect={(selectedTab) => handleTabChange(selectedTab)}
            className="profile-tabs"
          >
            <Nav.Item>
              <Nav.Link eventKey="about">About</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="tasks">Tasks</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="sub">Sub</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="membership">Membership Card</Nav.Link>
            </Nav.Item>
          </Nav>
        </div>
      </div>
      <div className="tab-line"></div> {/* Line below the tabs */}

      {/* Tab Content */}
      <div className="tab-content">
        {/* About Tab */}
        {activeTab === "about" && (
          <div className="about-tab" style={{ padding: "10px" }}>
            <h4>About Me</h4>
            <div className="about-container">
              {isEditing ? (
                <div className="about-edit-form">
                  <Form.Group>
                    <Form.Label>Prefix</Form.Label>
                    <Form.Control
                      type="text"
                      name="prefix"
                      value={editableDetails.prefix || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>Name</Form.Label>
                    <Form.Control
                      type="text"
                      name="name"
                      value={editableDetails.businessname || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <Form.Group>
                    <Form.Label>Product</Form.Label>
                    <Form.Control
                      type="text"
                      name="product"
                      value={editableDetails.product || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>Address</Form.Label>
                    <Form.Control
                      type="text"
                      name="doorno"
                      value={editableDetails.doorno || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>city</Form.Label>
                    <Form.Control
                      type="text"
                      name="city"
                      value={editableDetails.city || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>pincode</Form.Label>
                    <Form.Control
                      type="number"
                      name="pincode"
                      value={editableDetails.pincode || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>email</Form.Label>
                    <Form.Control
                      type="text"
                      name="email"
                      value={editableDetails.email || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>

                  <div className="action-buttons">
                    <Button variant="success" onClick={handleSave}>
                      Save
                    </Button>
                    <Button variant="secondary" onClick={toggleEdit}>
                      Cancel
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="about-details">
                  <p>
                    <strong>Prefix:</strong> {userData.prefix || "N/A"}
                  </p>
                  <p>
                    <strong>Address:</strong> {userData.doorno || "N/A"}
                  </p>
                  <p>
                    <strong>City:</strong> {userData.city || "N/A"}
                  </p>
                  <p>
                    <strong>Pincode:</strong> {userData.pincode || "N/A"}
                  </p>
                  <p>
                    <strong>Mobile:</strong> {userData.mobileno || "N/A"}
                  </p>
                  <p>
                    <strong>Email:</strong> {userData.email || "N/A"}
                  </p>
                  <Button variant="primary" className="edit-btn" onClick={toggleEdit}>
                    Edit
                  </Button>
                </div>
              )}
              {error && <p className="error">{error}</p>}
            </div>
          </div>
        )}

        {/* Tasks Tab */}
        {activeTab === "tasks" && (
          <div className="tasks-tab">
            <h4>My Tasks</h4>
            <div>
              <h5>Referral Count</h5>
              <p>{referralCount}</p>
            </div>
            <h5>My Team</h5>
            {isLoading ? (
              <p>Loading team data...</p>
            ) : (
              <ProgressBar
                now={taskCount}
                max={100}
                label={`${taskCount}%`}
                style={{ width: "60%" }}
              />
            )}
          </div>
        )}

        {/* Membership Tab */}
        {activeTab === "membership" && (
          <div className="membership-tab">
            <h4>Membership Card</h4>
            <div className="membership-card">
              <div className="card-front">
                {/* Your Card Front Content */}
                <div className="card-info">
                  <h5>Business Name</h5>
                  <p>{userData.businessname}</p>
                  <p>Product: {userData.product}</p>
                  <p>Joining Date: {userData.joiningDate}</p>
                </div>
              </div>
              <div className="card-back">
                {/* Your Card Back Content */}
                <p>Referral Count: {referralCount}</p>
                <Button onClick={handleDownloadPDF}>Download PDF</Button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Referral Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>My Referrals</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div>
            <p>Referral Count: {referralCount}</p>
            {/* Include any other referral details if needed */}
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default UserProfile;































<?php
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization");
header('Content-Type: application/json');

// Database credentials
$host = 'localhost';
$username = 'celfon5g_phonebookadmin';
$password = 'PdVbHjFY!!ty';
$dbname = 'celfon5g_ClientDatabase';

// Create database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die(json_encode(['error' => 'Database connection failed: ' . $conn->connect_error]));
}

// SQL query to fetch unique IDs and names with aggregated total count
$sql = "SELECT id, name, SUM(count) AS total_count FROM dataEntryDetails GROUP BY id, name ORDER BY id ASC";
$result = $conn->query($sql);

$data = [];
if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $data[] = $row;
    }
}

// Output data as JSON
echo json_encode($data);

// Close the database connection
$conn->close();
?>